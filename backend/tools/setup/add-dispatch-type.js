const mysql = require('mysql2/promise');
require('dotenv').config();

async function addDispatchType() {
    let connection;
    
    try {
        connection = await mysql.createConnection({
            host: process.env.DB_HOST || 'localhost',
            port: process.env.DB_PORT || 3306,
            user: process.env.DB_USER || 'root',
            password: process.env.DB_PASSWORD || '',
            database: process.env.DB_NAME || 'its_maritime_stock',
            multipleStatements: true
        });

        console.log('üîß AJOUT DU TYPE DISPATCH AU SYST√àME\n');

        // 1. V√©rifier la structure actuelle
        console.log('1Ô∏è‚É£ V√©rification de la structure actuelle...');
        const [columnInfo] = await connection.query(`
            SELECT COLUMN_TYPE 
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = ? 
            AND TABLE_NAME = 'mouvements_stock' 
            AND COLUMN_NAME = 'type_mouvement'
        `, [process.env.DB_NAME || 'its_maritime_stock']);

        console.log('Types actuels:', columnInfo[0].COLUMN_TYPE);

        // 2. Modifier l'enum pour ajouter 'dispatch'
        console.log('\n2Ô∏è‚É£ Ajout du type "dispatch" √† la colonne type_mouvement...');
        
        await connection.query(`
            ALTER TABLE mouvements_stock 
            MODIFY COLUMN type_mouvement 
            ENUM('entree', 'sortie', 'transfert', 'ajustement', 'dispatch') NOT NULL
        `);
        
        console.log('‚úÖ Type "dispatch" ajout√© avec succ√®s!');

        // 3. Mettre √† jour le trigger pour g√©rer les dispatches
        console.log('\n3Ô∏è‚É£ Mise √† jour du trigger pour g√©rer les dispatches...');
        
        await connection.query('DROP TRIGGER IF EXISTS after_mouvement_stock_insert');
        
        const createTriggerSQL = `
CREATE TRIGGER after_mouvement_stock_insert
AFTER INSERT ON mouvements_stock
FOR EACH ROW
BEGIN
    -- Pour les dispatches (depuis le manager vers les magasins)
    IF NEW.type_mouvement = 'dispatch' AND NEW.magasin_destination_id IS NOT NULL THEN
        INSERT INTO stocks (produit_id, magasin_id, quantite_disponible)
        VALUES (NEW.produit_id, NEW.magasin_destination_id, NEW.quantite)
        ON DUPLICATE KEY UPDATE
            quantite_disponible = quantite_disponible + NEW.quantite;
    
    -- Pour les entr√©es de stock (confirm√©es par le magasinier)
    ELSEIF NEW.type_mouvement = 'entree' AND NEW.magasin_destination_id IS NOT NULL THEN
        INSERT INTO stocks (produit_id, magasin_id, quantite_disponible)
        VALUES (NEW.produit_id, NEW.magasin_destination_id, NEW.quantite)
        ON DUPLICATE KEY UPDATE
            quantite_disponible = quantite_disponible + NEW.quantite;
    
    -- Pour les sorties de stock
    ELSEIF NEW.type_mouvement = 'sortie' AND NEW.magasin_source_id IS NOT NULL THEN
        INSERT INTO stocks (produit_id, magasin_id, quantite_disponible)
        VALUES (NEW.produit_id, NEW.magasin_source_id, 0)
        ON DUPLICATE KEY UPDATE
            quantite_disponible = GREATEST(0, quantite_disponible - NEW.quantite);
    
    -- Pour les transferts entre magasins
    ELSEIF NEW.type_mouvement = 'transfert' THEN
        -- Sortie du magasin source
        IF NEW.magasin_source_id IS NOT NULL THEN
            INSERT INTO stocks (produit_id, magasin_id, quantite_disponible)
            VALUES (NEW.produit_id, NEW.magasin_source_id, 0)
            ON DUPLICATE KEY UPDATE
                quantite_disponible = GREATEST(0, quantite_disponible - NEW.quantite);
        END IF;
        
        -- Entr√©e dans le magasin destination
        IF NEW.magasin_destination_id IS NOT NULL THEN
            INSERT INTO stocks (produit_id, magasin_id, quantite_disponible)
            VALUES (NEW.produit_id, NEW.magasin_destination_id, NEW.quantite)
            ON DUPLICATE KEY UPDATE
                quantite_disponible = quantite_disponible + NEW.quantite;
        END IF;
    END IF;
END`;

        await connection.query(createTriggerSQL);
        console.log('‚úÖ Trigger mis √† jour!');

        // 4. Cr√©er une vue pour le rapport dispatch vs entr√©es
        console.log('\n4Ô∏è‚É£ Cr√©ation de la vue pour le rapport comparatif...');
        
        await connection.query('DROP VIEW IF EXISTS v_rapport_dispatch_entrees');
        
        await connection.query(`
            CREATE VIEW v_rapport_dispatch_entrees AS
            SELECT 
                p.id as produit_id,
                p.nom as produit_nom,
                p.reference as produit_reference,
                m.id as magasin_id,
                m.nom as magasin_nom,
                -- Quantit√©s dispatch√©es par le manager
                COALESCE(SUM(CASE 
                    WHEN mv.type_mouvement = 'dispatch' 
                    THEN mv.quantite 
                    ELSE 0 
                END), 0) as quantite_dispatchee,
                -- Quantit√©s entr√©es confirm√©es par le magasinier
                COALESCE(SUM(CASE 
                    WHEN mv.type_mouvement = 'entree' 
                    THEN mv.quantite 
                    ELSE 0 
                END), 0) as quantite_entree,
                -- Diff√©rence (√©cart)
                COALESCE(SUM(CASE 
                    WHEN mv.type_mouvement = 'dispatch' 
                    THEN mv.quantite 
                    ELSE 0 
                END), 0) - COALESCE(SUM(CASE 
                    WHEN mv.type_mouvement = 'entree' 
                    THEN mv.quantite 
                    ELSE 0 
                END), 0) as ecart,
                -- Dates
                MAX(CASE 
                    WHEN mv.type_mouvement = 'dispatch' 
                    THEN mv.date_mouvement 
                END) as derniere_date_dispatch,
                MAX(CASE 
                    WHEN mv.type_mouvement = 'entree' 
                    THEN mv.date_mouvement 
                END) as derniere_date_entree
            FROM produits p
            CROSS JOIN magasins m
            LEFT JOIN mouvements_stock mv ON 
                mv.produit_id = p.id 
                AND mv.magasin_destination_id = m.id
                AND mv.type_mouvement IN ('dispatch', 'entree')
            GROUP BY p.id, p.nom, p.reference, m.id, m.nom
            HAVING quantite_dispatchee > 0 OR quantite_entree > 0
        `);
        
        console.log('‚úÖ Vue de rapport cr√©√©e!');

        // 5. Cr√©er une proc√©dure pour convertir les anciennes entr√©es en dispatches
        console.log('\n5Ô∏è‚É£ Cr√©ation de la proc√©dure de conversion...');
        
        await connection.query('DROP PROCEDURE IF EXISTS sp_convertir_entrees_navire_en_dispatch');
        
        await connection.query(`
            CREATE PROCEDURE sp_convertir_entrees_navire_en_dispatch()
            BEGIN
                -- Convertir les entr√©es li√©es √† un navire en dispatches
                UPDATE mouvements_stock 
                SET type_mouvement = 'dispatch'
                WHERE type_mouvement = 'entree' 
                AND navire_id IS NOT NULL
                AND created_by IN (
                    SELECT id FROM utilisateurs WHERE role = 'manager'
                );
                
                SELECT ROW_COUNT() as nb_conversions;
            END
        `);
        
        console.log('‚úÖ Proc√©dure cr√©√©e!');

        // 6. Exemple de requ√™te pour le rapport
        console.log('\n6Ô∏è‚É£ Test du rapport dispatch vs entr√©es...\n');
        
        const [rapport] = await connection.query(`
            SELECT 
                magasin_nom,
                produit_nom,
                quantite_dispatchee,
                quantite_entree,
                ecart,
                CASE 
                    WHEN ecart > 0 THEN 'Manque √† confirmer'
                    WHEN ecart < 0 THEN 'Exc√®s non dispatch√©'
                    ELSE 'OK'
                END as statut
            FROM v_rapport_dispatch_entrees
            WHERE ecart != 0
            ORDER BY magasin_nom, produit_nom
            LIMIT 10
        `);

        if (rapport.length > 0) {
            console.log('üìä √âcarts d√©tect√©s:');
            rapport.forEach(r => {
                console.log(`   ${r.magasin_nom} - ${r.produit_nom}: ${r.ecart} (${r.statut})`);
            });
        } else {
            console.log('‚úÖ Aucun √©cart d√©tect√© entre dispatches et entr√©es');
        }

        // 7. R√©sum√©
        console.log('\n\n‚úÖ SYST√àME MIS √Ä JOUR AVEC SUCC√àS!\n');
        console.log('üìã Nouveau flux de travail:');
        console.log('1. Manager: Fait un DISPATCH depuis la r√©ception navire');
        console.log('2. Magasinier: Confirme la r√©ception par une ENTR√âE');
        console.log('3. Magasinier: Fait des SORTIES pour les livraisons clients');
        console.log('4. Manager: Peut voir les √©carts dispatch/entr√©e dans les rapports');
        
        console.log('\nüí° Avantages:');
        console.log('- Tra√ßabilit√© compl√®te du flux');
        console.log('- D√©tection des √©carts automatique');
        console.log('- Responsabilit√©s clairement s√©par√©es');
        console.log('- Rapports pr√©cis pour le contr√¥le');

    } catch (error) {
        console.error('‚ùå Erreur:', error.message);
    } finally {
        if (connection) {
            await connection.end();
        }
    }
}

// Ex√©cuter la mise √† jour
addDispatchType();