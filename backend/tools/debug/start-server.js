#!/usr/bin/env node

const { spawn } = require('child_process');
const axios = require('axios');
const path = require('path');

const PORT = process.env.PORT || 5000;
const DB_CHECK_URL = `http://localhost:${PORT}/api/health`;

console.log('üöÄ D√©marrage du serveur ITS Maritime Stock...\n');

async function checkDatabase() {
    console.log('üîç Test de connexion √† la base de donn√©es...');
    
    try {
        const testConnection = require('./test-connection');
        console.log('‚úÖ Connexion MySQL test√©e avec succ√®s!\n');
        return true;
    } catch (error) {
        console.error('‚ùå Erreur de connexion √† la base de donn√©es:', error.message);
        console.error('\nüí° Suggestions:');
        console.error('   1. V√©rifiez que XAMPP MySQL est d√©marr√©');
        console.error('   2. V√©rifiez les identifiants dans .env');
        console.error('   3. Assurez-vous que la base "its_maritime_stock" existe\n');
        return false;
    }
}

async function waitForServer() {
    console.log('‚è≥ Attente du d√©marrage du serveur...');
    
    let attempts = 0;
    const maxAttempts = 30;
    
    while (attempts < maxAttempts) {
        try {
            const response = await axios.get(DB_CHECK_URL, { timeout: 2000 });
            if (response.data.status === 'OK') {
                console.log('‚úÖ Serveur d√©marr√© et op√©rationnel!');
                console.log('üìä Status:', response.data.status);
                console.log('üóÑÔ∏è  Base de donn√©es:', response.data.database);
                return true;
            }
        } catch (error) {
            // Serveur pas encore pr√™t
        }
        
        attempts++;
        await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    console.error('‚ùå Le serveur n\'a pas pu d√©marrer dans les temps impartis');
    return false;
}

async function testEndpoints() {
    console.log('\nüß™ Test des endpoints principaux...');
    
    const endpoints = [
        { url: `http://localhost:${PORT}/api`, name: 'API Base' },
        { url: `http://localhost:${PORT}/api/health`, name: 'Health Check' }
    ];
    
    for (const endpoint of endpoints) {
        try {
            const response = await axios.get(endpoint.url, { timeout: 5000 });
            console.log(`‚úÖ ${endpoint.name}: OK`);
        } catch (error) {
            console.log(`‚ùå ${endpoint.name}: ${error.message}`);
        }
    }
}

async function startServer() {
    // 1. V√©rifier la base de donn√©es
    const dbOk = await checkDatabase();
    if (!dbOk) {
        process.exit(1);
    }
    
    // 2. D√©marrer le serveur
    console.log('üöÄ Lancement du serveur Express...');
    const serverProcess = spawn('node', ['server-mysql.js'], {
        cwd: __dirname,
        stdio: 'inherit',
        env: { ...process.env, NODE_ENV: 'development' }
    });
    
    // 3. Attendre que le serveur soit pr√™t
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    const serverReady = await waitForServer();
    if (!serverReady) {
        serverProcess.kill();
        process.exit(1);
    }
    
    // 4. Tester les endpoints
    await testEndpoints();
    
    console.log('\nüéâ Serveur ITS Maritime Stock d√©marr√© avec succ√®s!');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log(`üåê API URL: http://localhost:${PORT}/api`);
    console.log(`üè• Health Check: http://localhost:${PORT}/api/health`);
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('\nüìù Endpoints disponibles:');
    console.log('   üîê Auth:        /api/auth');
    console.log('   üö¢ Navires:     /api/navires');
    console.log('   üë• Users:       /api/users');
    console.log('   üì¶ Produits:    /api/produits');
    console.log('   üìä Stock:       /api/stock');
    console.log('   üë§ Clients:     /api/clients');
    console.log('   üìã Commandes:   /api/commandes');
    console.log('   üöö Livraisons:  /api/livraisons');
    console.log('   üìà Rapports:    /api/rapports');
    console.log('\nüõë Pour arr√™ter le serveur: Ctrl+C');
    
    // G√©rer l'arr√™t propre
    process.on('SIGINT', () => {
        console.log('\n\nüõë Arr√™t du serveur en cours...');
        serverProcess.kill();
        process.exit(0);
    });
    
    process.on('SIGTERM', () => {
        console.log('\n\nüõë Arr√™t du serveur en cours...');
        serverProcess.kill();
        process.exit(0);
    });
}

// Lancer le processus
startServer().catch(error => {
    console.error('üí• Erreur fatale:', error);
    process.exit(1);
});